{
  "version": 3,
  "sources": ["../../helpers/chk.ts"],
  "sourcesContent": ["import { Api, TelegramClient } from \"telegram\"\nimport { NewMessageEvent } from \"telegram/events\"\nimport { sleep, up } from \"../strt\"\nimport { Upt } from \"../helpers\"\nimport * as fs from 'fs'\nimport { getInputEntity, getMe, _selfId } from \"telegram/client/users\"\nimport bigInt from \"big-integer\"\n\n\nlet uptt: any;\nexport default class Chk {\n    client: TelegramClient\n    e: NewMessageEvent | any | undefined\n    m: Api.Message | undefined\n\n    constructor(client: TelegramClient, e: NewMessageEvent) {\n        this.client = client;\n        this.e = e;\n        this.m = e.message\n    }\n\n    async runProgram(lim: any) {\n        try {\n            console.log(\"Program started\");\n            // let id : any = this.m?.peerId \n            // console.log(lim)\n\n            await this.client?.getMessages(await this.chat(), { limit: 100 })\n            await this.edit('Initialzed messages: ' + ((1) * 100));\n\n            if (lim > 10)\n                lim = 10\n            else if (lim < 1) {\n                lim = 1\n            }\n            console.log(lim)\n\n            for (let i = 1; i < lim; i++) {\n                await this.client?.getMessages(await this.chat(), { addOffset: 100 * i, limit: 100 * (i + 1) });\n                await this.edit('Initialzed messages: ' + ((i + 1) * 100));\n                await sleep(3000);\n            }\n\n            this.edit('Initialzation completed Now do actions')\n\n            console.log(\"Program ended\");\n        } catch (error: any) {\n            this.edit(error.message)\n        }\n    }\n\n    async runWithTimeout(duration: number, lim: any) {\n        return Promise.race([\n            this.runProgram(lim),\n            new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    reject(new Error(\"Program exceeded time limit and was terminated\"));\n                }, duration);\n            })\n        ]);\n    }\n\n\n    innit = async () => {\n        try {\n            this.edit('Initializing....', { d: false })\n            // let id : any = this.m?.peerId || await this.chat()\n\n            let a: any = await this.client.getParticipants(await this.chat(), { limit: 10000 })\n            this.edit(\"initialized participants now initializing messages..\", { d: false })\n            let lim: any;\n            const matches: any = (this.m?.message as string).match(new RegExp(/init [0-9]{1,2}/));\n            if (matches) {\n                let matchs: any = (matches[0] as string).match(new RegExp(/[0-9]{1,2}/));\n                // console.log(matches[0])\n                lim = parseInt(matchs[0]) | 1\n            }\n\n            await this.runWithTimeout(100000, lim)\n                .then(() => console.log(\"Program completed successfully within time limit\"))\n                .catch((error) => console.error(error.message));\n            this.edit('Initialized !!')\n\n            return a;\n\n        } catch (err: any) {\n            console.log(err)\n            this.edit(err.message)\n        }\n    }\n\n    send = async (message: any, mid: any = undefined) => {\n        try {\n            let idd = mid || undefined\n            return await this.client.sendMessage(await this.chat(), { message: message, replyTo: idd, })\n        } catch (error: any) {\n            console.log(error.message)\n        }\n    }\n\n    edit = async (msg: any, { id = false, d = true, rid = false, e = false }: any = {}): Promise<any> => {\n        try {\n            let idd = id || this.m?.id\n\n            let rmsg: any;\n            if (this.m?.out == true || id) {\n                rmsg = await this.client.editMessage(await this.chat(), { message: idd, text: msg })\n            }\n            else {\n                if (rid) {\n                    rmsg = await this.send(msg, rid)\n                }\n                else {\n                    await this.m?.delete()\n                    rmsg = await this.send(msg)\n                }\n            }\n            if (d)\n                this.del(rmsg)\n            return rmsg\n        } catch (error: any) {\n            console.log(error.message)\n\n        }\n    }\n\n    chat: any = async () => {\n        if (this.m?.isPrivate) {\n            return await this.m?.getInputChat()\n        } else {\n            return this.m?.peerId\n        }\n    }\n\n    isAdmin = async (m?: any) => {\n        try {\n            if (this.m?.isChannel) {\n                let user = m?.fromId || _selfId(this.client)\n                let lt = await this.client.invoke(\n                    new Api.channels.GetParticipant({\n                        channel: this.m?.peerId,\n                        participant: user,\n                    })\n                )\n\n                if (lt.participant.className == \"ChannelParticipantCreator\" || lt.participant.className == \"ChannelParticipantAdmin\") {\n                    // return lt;\n                    return undefined;\n                }\n            } else {\n                this.edit('This command is group/channels specific')\n                return undefined;\n            }\n        } catch {\n            this.edit('Error in isAdmin: Chk')\n            return undefined;\n        }\n    }\n\n    v = {\n        id: undefined,\n        all: undefined,\n        d: undefined,\n        mt: undefined,\n    }\n    gpchk = async ({ id, all, d, mt, umt, bn, ubn, pmt }: any = {}) => {\n        try {\n            if (!this.m?.isChannel) {\n                this.edit('This command is group/channels specific')\n                return false\n            }\n\n            let user = id || _selfId(this.client)\n\n            let lt = await this.client.invoke(\n                new Api.channels.GetParticipant({\n                    channel: this.m?.peerId,\n                    participant: user,\n                })\n            )\n\n            if (!lt) {\n                // lt = await this.client.invoke(\n                //     new Api.users.GetFullUser({\n                //         id: user,\n                //     })\n                // )\n                return 'ngp'\n            }\n\n            if (lt.participant.className == \"ChannelParticipantCreator\" || lt.participant.className == \"ChannelParticipantAdmin\") {\n                await this.edit('User is admin')\n                return false\n            }\n\n            if (lt.participant) {\n                let o: any = lt.participant\n                let r: any = o.bannedRights;\n                if (r.sendMessages == true && mt) {\n                    this.edit('User is Muted already')\n                    return false\n                } else if (umt) {\n                    return true;\n                } else if (ubn) {\n                    return true;\n                }\n\n                console.log(lt)\n                return true;\n            } else if (umt) {\n                this.edit('User is unmuted already')\n                return false\n            } else if (ubn) {\n                this.edit('User is unbanned already')\n                return false\n            }\n\n            return true\n        } catch (err: any) {\n            console.log(err.message)\n            this.edit('Error in gpchk: Chk')\n            return undefined;\n        }\n    }\n\n    gperr = async (msg: any) => {\n\n        if (msg.includes('USER_ADMIN_INVALID'))\n            return await this.edit(`User is admin`)\n\n        if (msg.includes('MSG_ID_INVALID'))\n            return await this.edit(`Invalid message ID provided`)\n\n        if (msg.includes('INPUT_USER_DEACTIVATED'))\n            return await this.edit(`The specified user was deleted`)\n\n        if (msg.includes('CHAT_ADMIN_REQUIRED'))\n            return await this.edit(`You must be an admin with ban permission to do this`)\n\n        if (msg.includes('PEER_ID_INVALID'))\n            return await this.edit(`The provided peer id is invalid`)\n\n        if (msg.includes('USER_ID_INVALID'))\n            return await this.edit(`The provided user ID is invalid`)\n\n        if (msg.includes('CHANNEL_PRIVATE'))\n            return await this.edit(`You haven't joined this channel/supergroup`)\n\n        if (msg.includes('CHANNEL_INVALID'))\n            return await this.edit(`The provided channel is invalid`)\n\n        if (msg.includes('CHAT_WRITE_FORBIDDEN'))\n            return await this.edit(`You can't write in this chat`)\n\n        if (msg.includes('PARTICIPANT_ID_INVALID'))\n            return await this.edit(`Error: Seems you are doing it to self`)\n\n        return undefined\n    }\n\n    chk = async () => {\n        try {\n\n            let cmd: number, user: any;\n            if ((up() as any ).strt == '/') {\n                cmd = 1;\n            } else {\n                cmd = 0;\n            }\n\n            const matches = (this.m?.message as string).match(new RegExp(/[0-9]{9,11}/));\n            if (matches) {\n                try {\n                    user = bigInt(matches[0])\n                    console.log(await getInputEntity(this.client, user))\n                    //   console.log(await this.client.getEntity(1643271211))\n                } catch (error) {\n                    await this.innit()\n                    console.log(error)\n                }\n                // await this.client.getParticipants(this.chat)\n            }\n\n            /* ************************************************************************* */\n\n            else if (this.m?.entities) {\n                const me: any = this.m.entities\n                /* ************************************************************************* */\n\n                if (me[cmd].className == \"MessageEntityMentionName\")\n                    user = me[cmd].userId\n\n                /* ************************************************************************* */\n\n                else if (me[cmd].className == \"MessageEntityMention\") {\n                    let metch: any = (this.m?.message as string).match(new RegExp(/@[A-Za-z1-9_]+/));\n                    user = metch[0]\n                }\n\n                /* ************************************************************************* */\n\n                else {\n                    this.edit(\"Please enter correct id\")\n                }\n            }\n\n            /* ************************************************************************* */\n\n            else if (this.m?.replyTo != null) {\n                try {\n                    const replied: any = await this.m?.getReplyMessage()\n                    user = replied.fromId.userId\n                } catch (err: any) {\n                    console.log('mention: ' + err.message)\n                    return undefined;\n                }\n\n                /* ************************************************************************* */\n\n            } else {\n                this.edit('Please give any user preference')\n            }\n\n            // const result = await this.client.invoke(\n            //     new Api.channels.GetParticipant({\n            //         channel: this.m?.peerId,\n            //         participant: user,\n            //     }))\n\n            return user\n\n        } catch (error: any) {\n            console.log(\"CHK: \" + error.message)\n        }\n    }\n\n    dtm = async () => {\n        let tm;\n        const matcd = (this.m?.message as string).match(new RegExp(/[ ]\\d{1,3}[ ]{0,1}[mMdsShHyYwW]/))\n        if (matcd) {\n            let num: any = matcd[0].match(new RegExp(/[0-9]{1,3}/))\n            let tm1: any = matcd[0].match(new RegExp(/[mMdsShHyYwW]/))\n            let nm = parseInt(num[0])\n            let tmm = tm1[0]\n            if (tmm == 's' || tmm == 'S') {\n                tm = nm\n            }\n            else if (tmm == 'm')\n                tm = nm * 60\n            else if (tmm == 'h' || tmm == 'H')\n                tm = nm * 60 * 60\n            else if (tmm == 'd')\n                tm = nm * 60 * 60 * 12\n            else if (tmm == 'D')\n                tm = nm * 60 * 60 * 24\n            else if (tmm == 'w' || tmm == 'W')\n                tm = nm * 60 * 60 * 24 * 7\n            else if (tmm == 'M')\n                tm = nm * 60 * 60 * 24 * 30\n            else if (tmm == 'y' || tmm == 'Y')\n                tm = nm * 60 * 60 * 24 * 365\n\n            console.log(matcd)\n\n            return tm\n        }\n\n    }\n\n\n    setdel = async () => {\n        const dt = await this.dtm()\n\n        if (dt) {\n            const dataString = JSON.stringify({ t: dt }, null, 2);\n            fs.writeFileSync('./helpers/setdel.txt', dataString);\n            const matcd: any = (this.m?.message as string).match(new RegExp(/[ ]\\d{1,3}[ ]{0,1}[mMdsShHyYwW]/))\n            this.edit(\"deleting message time has been set to:\" + matcd[0])\n        } else {\n            this.edit(\"deleting message time has not set\")\n        }\n    }\n\n    del = (res: any = -1) => {\n\n        let s: any;\n        if (res == -1)\n            s = this.m?.id\n        else\n            s = res.id\n\n        const fileData = fs.readFileSync('./helpers/setdel.txt', 'utf-8');\n        const me = JSON.parse(fileData);\n        sleep(1000 * me.t).then(() => {\n            const chatId = this.m?.chatId as import(\"big-integer\").BigInteger\n            this.client.deleteMessages(chatId, [s], {})\n        })\n    }\n}\n\n"],
  "mappings": "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",
  "names": ["bigInt", "_a"]
}
