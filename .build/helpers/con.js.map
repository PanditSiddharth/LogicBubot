{
  "version": 3,
  "sources": ["../../helpers/con.ts"],
  "sourcesContent": ["const { MongoClient } = require(\"mongodb\");\nimport dotenv from \"dotenv\";\nimport { Api, client, TelegramClient } from \"telegram\";\nimport { NewMessageEvent } from \"telegram/events\";\nimport { Upt } from \"../helpers\";\ndotenv.config();\n\nlet cons: any = null\n\nexport default class Con {\n  client: TelegramClient | any | undefined\n  e: NewMessageEvent | any | undefined\n  m: Api.Message | undefined\n  upt: Upt | any | undefined\n\n  // constructor(client: TelegramClient | undefined, e: NewMessageEvent, upt: Upt) {\n  //   this.client = client;\n  //   this.e = e;\n  //   this.upt = upt\n  //   this.m = e.message\n  // }\n\n  con() {\n    const uri: any = process.env.URI;\n    if(!cons){\n    cons = new MongoClient(uri, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    cons.connect();\n  }\n    return cons\n  }\n\n  close(){\n    // const uri: any = process.env.URI;\n    // const cn: any = new MongoClient(uri, {\n    //   useNewUrlParser: true,\n    //   useUnifiedTopology: true,\n    // });\n    // cons.db('db').serverStatus().connections\n\n    cons.close();\n    return cons\n  }\n\n  insert = async ({ ob = undefined, t = null }: any) => {\n    let cn: any = this.con()\n    try {\n      if (!ob)\n        return console.log('object null')\n      let db = cn.db('db');\n      // let db = cn.db('admin');\n\n\n      // db.command({ serverStatus: 1 }, (err: any, res: any) => {\n      //   console.log(res);\n      //   cn.close();\n      // });\n      // return\n      // console.log(db.serverStatus().connections)\n      const col = db.collection('col');\n      const inserted = await col.insertOne(ob);\n      console.log(inserted);\n      return inserted;\n    } catch (err: any) {\n      console.log(err.message)\n    } finally {\n      // await cn.close();\n    }\n  }\n\n  del = async ({ ob = undefined, t = null }: any) => {\n    let cn: any = this.con()\n    try {\n      if (!ob)\n        return console.log('object null')\n\n      let db = cn.db('db');\n      const col = db.collection('col');\n      let deleted: any;\n      if (t == null)\n        deleted = await col.deleteMany(ob);\n      console.log(deleted);\n      return deleted\n    } catch (err: any) {\n      console.log(err.message)\n    }\n  }\n\n  find = async ({ ob = undefined, t = null }: any) => {\n    let cn: any = this.con()\n    try {\n      if (!ob)\n        return console.log('object null')\n\n      await cn.connect();\n      let db = cn.db('db');\n      const col = db.collection('col');\n      let found: any;\n      if (t == null)\n        found = await col.findOne(ob);\n      console.log(found);\n      return found;\n    } catch (error: any) {\n      console.log(error.message);\n    }\n  }\n\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAAmB;AADnB,MAAM,EAAE,YAAY,IAAI,QAAQ,SAAS;AAKzC,cAAAA,QAAO,OAAO;AAEd,IAAI,OAAY;AAEhB,MAAO,IAAkB;AAAA,EAAzB;AAqCE,kBAAS,OAAO,EAAE,KAAK,QAAW,IAAI,KAAK,MAAW;AACpD,UAAI,KAAU,KAAK,IAAI;AACvB,UAAI;AACF,YAAI,CAAC;AACH,iBAAO,QAAQ,IAAI,aAAa;AAClC,YAAI,KAAK,GAAG,GAAG,IAAI;AAUnB,cAAM,MAAM,GAAG,WAAW,KAAK;AAC/B,cAAM,WAAW,MAAM,IAAI,UAAU,EAAE;AACvC,gBAAQ,IAAI,QAAQ;AACpB,eAAO;AAAA,MACT,SAAS,KAAP;AACA,gBAAQ,IAAI,IAAI,OAAO;AAAA,MACzB,UAAE;AAAA,MAEF;AAAA,IACF;AAEA,eAAM,OAAO,EAAE,KAAK,QAAW,IAAI,KAAK,MAAW;AACjD,UAAI,KAAU,KAAK,IAAI;AACvB,UAAI;AACF,YAAI,CAAC;AACH,iBAAO,QAAQ,IAAI,aAAa;AAElC,YAAI,KAAK,GAAG,GAAG,IAAI;AACnB,cAAM,MAAM,GAAG,WAAW,KAAK;AAC/B,YAAI;AACJ,YAAI,KAAK;AACP,oBAAU,MAAM,IAAI,WAAW,EAAE;AACnC,gBAAQ,IAAI,OAAO;AACnB,eAAO;AAAA,MACT,SAAS,KAAP;AACA,gBAAQ,IAAI,IAAI,OAAO;AAAA,MACzB;AAAA,IACF;AAEA,gBAAO,OAAO,EAAE,KAAK,QAAW,IAAI,KAAK,MAAW;AAClD,UAAI,KAAU,KAAK,IAAI;AACvB,UAAI;AACF,YAAI,CAAC;AACH,iBAAO,QAAQ,IAAI,aAAa;AAElC,cAAM,GAAG,QAAQ;AACjB,YAAI,KAAK,GAAG,GAAG,IAAI;AACnB,cAAM,MAAM,GAAG,WAAW,KAAK;AAC/B,YAAI;AACJ,YAAI,KAAK;AACP,kBAAQ,MAAM,IAAI,QAAQ,EAAE;AAC9B,gBAAQ,IAAI,KAAK;AACjB,eAAO;AAAA,MACT,SAAS,OAAP;AACA,gBAAQ,IAAI,MAAM,OAAO;AAAA,MAC3B;AAAA,IACF;AAAA;AAAA,EArFA,MAAM;AACJ,UAAM,MAAW,QAAQ,IAAI;AAC7B,QAAG,CAAC,MAAK;AACT,aAAO,IAAI,YAAY,KAAK;AAAA,QAC1B,iBAAiB;AAAA,QACjB,oBAAoB;AAAA,MACtB,CAAC;AACD,WAAK,QAAQ;AAAA,IACf;AACE,WAAO;AAAA,EACT;AAAA,EAEA,QAAO;AAQL,SAAK,MAAM;AACX,WAAO;AAAA,EACT;AAiEF;",
  "names": ["dotenv"]
}
