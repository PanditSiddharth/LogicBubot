{
  "version": 3,
  "sources": ["../../bot/help.ts"],
  "sourcesContent": ["import { Context, Markup } from \"telegraf\";\nimport { Api, TelegramClient } from \"telegram\";\nimport { NewMessageEvent } from \"telegram/events\";\nconst { Button } = require(\"../node_modules/telegram/tl/custom/button\");\nimport Chk from \"../helpers/chk\";\n\nconst helpb = (bot: any) => {\n    // Create an inline keyboard\n\n    const inlineKeyboard = Markup.inlineKeyboard([[{ text: \"text\", callback_data: \"1\" }]]);\n\n    bot.on('inline_query', async (ctx: Context) => {\n        const query: any = (ctx.inlineQuery as any).query;\n        if (!query) {\n            return;\n        }\n\n        try {\n            const results: any = [\n                {\n                    type: 'article',\n                    id: '1',\n                    title: 'Help',\n                    description: 'Help commands of Logic.B userbot',\n                    input_message_content: {\n                        message_text: 'This is help buttons of Logic.B userbot for more You can see to contact dev option',\n                    },\n                    reply_markup: {\n                        inline_keyboard: [\n                            [\n                                { text: 'Admin Commands', callback_data: \"adm\" },\n                                { text: 'Tools', callback_data: \"too\" },\n                            ],\n                            [\n                                { text: 'Arts', callback_data: \"art\" },\n                                { text: 'helpers', callback_data: \"hel\" },\n                            ],\n                            [\n                                { text: 'Contact Developer', callback_data: \"dev\" },\n                            ]\n                        ],\n                    },\n                }\n            ];\n\n            // Callback query handler\n            bot.on('callback_query', (ctx: Context) => {\n                const data = (ctx.callbackQuery as any).data;\n                // console.log(ctx.callbackQuery)\n\n                const newMenu = {\n                    inline_keyboard: [\n                        [{ text: 'Back', callback_data: 'back' }],\n                        [{ text: 'Close', callback_data: 'close' }],\n                    ],\n                };\n\n\n\n                // Handle button clicks\n                if (data === 'adm') {\n                    try {\n                        // Update the buttons and send a new message\n                        ctx.editMessageText(`\uD835\uDC06\uD835\uDC2B\uD835\uDC28\uD835\uDC2E\uD835\uDC29 \uD835\uDC00\uD835\uDC1D\uD835\uDC26\uD835\uDC22\uD835\uDC27 \uD835\uDC1C\uD835\uDC28\uD835\uDC26\uD835\uDC26\uD835\uDC1A\uD835\uDC27\uD835\uDC1D\uD835\uDC2C: \n\n*\uD835\uDC1B\uD835\uDC1A\uD835\uDC27 to ban users\n*\uD835\uDC26\uD835\uDC2E\uD835\uDC2D\uD835\uDC1E to mute users\n*\uD835\uDC2E\uD835\uDC27\uD835\uDC26\uD835\uDC2E\uD835\uDC2D\uD835\uDC1E to unmute users\n*\uD835\uDC2E\uD835\uDC27\uD835\uDC1B\uD835\uDC1A\uD835\uDC27 to unban users\n*\uD835\uDC24\uD835\uDC22\uD835\uDC1C\uD835\uDC24 to kick users`, {\n                            reply_markup: newMenu,\n                        });\n                    } catch (error: any) {\n                        console.log(error.message);\n                    }\n\n                } else if (data === 'close') {\n                    try {\n                        // bot.telegram.deleteMessage(ctx.callbackQuery?.inline_message_id)\n                        ctx.answerCbQuery(\"it is not implemented now\")\n                    } catch (error: any) {\n                        console.log(error.message);\n                    }\n                }\n                else if (data === 'too') {\n                    try {\n                        // Update the buttons and send a new message\n                        ctx.editMessageText(`\uD835\uDC07\uD835\uDC1E\uD835\uDC25\uD835\uDC29: \uD835\uDC02\uD835\uDC28\uD835\uDC26\uD835\uDC26\uD835\uDC1A\uD835\uDC27\uD835\uDC1D\uD835\uDC2C \uD835\uDC22\uD835\uDC27 \uD835\uDC14\uD835\uDC2C\uD835\uDC1E\uD835\uDC2B\uD835\uDC1B\uD835\uDC28\uD835\uDC2D\n\n*\uD835\uDC21\uD835\uDC1E\uD835\uDC25\uD835\uDC29 to see help\n*\uD835\uDC29\uD835\uDC22\uD835\uDC27\uD835\uDC20 to see uptime(status)\n*\uD835\uDC24\uD835\uDC22\uD835\uDC25\uD835\uDC25 to make animation text\n*\uD835\uDC22\uD835\uDC27\uD835\uDC22\uD835\uDC2D to initialize useridies\n*\uD835\uDC2C\uD835\uDC1E\uD835\uDC2D\uD835\uDC1D\uD835\uDC1E\uD835\uDC25 to set auto deletion time\n*\uD835\uDC1C\uD835\uDC25\uD835\uDC28\uD835\uDC27\uD835\uDC1E to clone users profile\n    *\uD835\uDC1C\uD835\uDC25\uD835\uDC28\uD835\uDC27\uD835\uDC1E \uD835\uDC2C to save current profile\n    *\uD835\uDC1C\uD835\uDC25\uD835\uDC28\uD835\uDC27\uD835\uDC1E \uD835\uDC2B to retrive saved`, {\n                            reply_markup: newMenu,\n                        });\n\n\n                    } catch (error: any) {\n                        console.log(error.message);\n                    }\n                } else if (data === 'art') {\n                    try {\n                        // Update the buttons and send a new message\n                        ctx.editMessageText(`\nArt commands: \n\n*ping uptime\n*kill killing animation\n                `, {\n                            reply_markup: newMenu,\n                        });\n                    } catch (error: any) {\n                        console.log(error.message);\n                    }\n                } else if (data === 'hel') {\n                    try {\n                        // Update the buttons and send a new message\n                        ctx.editMessageText(`\n\uD835\uDC14\uD835\uDC2C\uD835\uDC1E \uD835\uDC2D\uD835\uDC22\uD835\uDC26\uD835\uDC1E\uD835\uDC2C \uD835\uDC22\uD835\uDC27 \uD835\uDC1C\uD835\uDC28\uD835\uDC26\uD835\uDC26\uD835\uDC1A\uD835\uDC27\uD835\uDC1D\uD835\uDC2C:\n\nsecond:s or S  minute:m  \nHour: h or H\n12hour: d  24hour: D\nweak: w or W\nmonth: M   Year: y or Y\n`, {\n                            reply_markup: newMenu,\n                        });\n                    } catch (error: any) {\n                        console.log(error.message);\n                    }\n                } else if (data === 'dev') {\n                    try {\n                        // Update the buttons and send a new message\n                        ctx.editMessageText(`\n\n@Dev Developer: @PanditSiddharth\n@Con Contact @LogicB_Support\n                `, {\n                            reply_markup: newMenu,\n                        });\n                    } catch (error: any) {\n                        console.log(error.message);\n                    }\n                }\n                else if (data === 'back') {\n                    // Update the buttons and send a new message\n                    try {\n                        ctx.editMessageText(`\nThis is help buttons of Logic.B userbot for more You can see to contact dev option\n                `, {\n                            reply_markup: {\n                                inline_keyboard: [\n                                    [\n                                        { text: 'Admin Commands', callback_data: \"adm\" },\n                                        { text: 'Tools', callback_data: \"too\" },\n                                    ],\n                                    [\n                                        { text: 'Arts', callback_data: \"art\" },\n                                        { text: 'helpers', callback_data: \"hel\" },\n                                    ],\n                                    [\n                                        { text: 'Contact Developer', callback_data: \"dev\" },\n                                    ]\n                                ],\n                            },\n                        });\n\n                    } catch (error: any) {\n                        console.log(error.message);\n                    }\n                }\n\n                else {\n                    ctx.reply(\"You selected Lol option\")\n                }\n            });\n\n\n\n            // bot.on('message', (ctx: any, next: any) => {\n            //     // Send a message with the inline keyboard\n            //     ctx.reply('Main Menu', {\n            //         reply_markup: mainMenu,\n            //     });\n            //     next()\n            // });\n\n\n            //   // Start command handler\n            //   bot.start((ctx: any) => {\n            //     // Send the main menu\n            //     ctx.reply('Main Menu', {\n            //       reply_markup: mainMenu,\n            //     });\n            //   });\n            ctx.answerInlineQuery(results);\n        } catch (error) {\n\n        }\n\n    });\n}\n\nexport default helpb\n\nexport const hlp = async (client: TelegramClient, e: NewMessageEvent) => {\n    try {\n        const m: Api.Message = e.message\n        let y = new Chk(client, e)\n        const resut: Api.messages.BotResults = await client.invoke(\n            new Api.messages.GetInlineBotResults({\n                bot: \"@node231bot\",\n                peer: await y.chat(),\n                query: \"help\",\n                offset: \"@node231bot \",\n                geoPoint: new Api.InputGeoPoint({\n                    lat: 8.24,\n                    long: 8.24,\n                    accuracyRadius: 5,\n                }),\n            })\n        );\n\n        const result2: any = await client.invoke(\n            new Api.messages.SendInlineBotResult({\n                peer: await y.chat(),\n                // randomId: resut.results[0].id,\n                queryId: resut.queryId,\n                id: resut.results[0].id,\n                hideVia: true,\n                scheduleDate: 0,\n                // sendAs: \"gif\",\n            })\n        );\n\n        //   console.log(result2.updates[2].message)\n        //   let med: any = result2.updates[2].message.media\n\n    } catch (error: any) {\n        console.log(\"hlp: \" + error.message)\n    }\n}\n"],
  "mappings": "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",
  "names": ["ctx", "Chk"]
}
