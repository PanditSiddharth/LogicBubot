{
  "version": 3,
  "sources": ["../../bot/vc.ts"],
  "sourcesContent": ["\n// import { join } from \"../node_modules/gram-tgcalls/src/calls\";\n// import { GramTGCalls } from \"../node_modules/gram-tgcalls/src/index\";\n// import { GramTGCalls } from \"gram-tgcalls/src/index\";\n\nimport { Api, client, TelegramClient } from \"telegram\";\nimport { NewMessageEvent } from \"telegram/events\";\nimport Chk from \"../helpers/chk\";\n// import { TGCalls, Stream } from \"tgcalls-next\";\n// import { SdpBuilder } from '../node_modules/tgcalls-next/lib/sdp_builder.d.ts';\n\nexport let call: any;\nlet y: any;\nconst vc = async (client: TelegramClient, e: NewMessageEvent) => {\n    \n    let y = new Chk(client, e)\n    try{\n    const result = await client.invoke(\n        new Api.phone.CreateGroupCall({\n          peer: \"@ignou_bca_group\",\n          randomId: e.message.id,\n        //   rtmpStream: true,\n          title: \"My very normal title\",\n          scheduleDate: 0,\n        })\n      );\n      call = (result as any).updates[0].call\n\n    //   console.log((result as any).updates[0].call); \n\n\n}catch(err: any){\n    console.log(await y.chat())\n    console.log(err.message)\n}\n}\n\nexport default vc\n\n\nexport const joinvc = async (client: TelegramClient, e: NewMessageEvent) => {\n    const ssrc: number = Math.floor(Math.random() * 4294967296);\n    let y = new Chk(client, e)\ntry{\n    const reslt = await client.invoke(\n        new Api.channels.GetFullChannel({\n          channel: await y.chat(),\n        })\n      );\n      console.log(reslt.fullChat.call); \n      let cll: any = reslt.fullChat.call\n\n        // join(client, cll, )\n\n\n      const dt = await client.invoke(new Api.phone.GetCallConfig());\n      console.log(dt); \n    \n    const result = await client.invoke(\n        new Api.phone.JoinGroupCall({\n          call: new Api.InputGroupCall({\n            id: cll.id,\n            accessHash: cll.accessHash,\n          }),\n          joinAs: \"@panditSiddharth0\",\n          params: new Api.DataJSON({\n            data: dt.data,\n          }),\n          muted: true,\n          videoStopped: true,\n         \n          // inviteHash: \"some string\",\n        })\n      );\n      console.log(result);\n\n    //   const mt = await client.invoke(new Api.phone.JoinGroupCall())\n        // let n = new TGCalls(undefined)\n        // let n = new GramTGCalls(client, await y.chat())\n        // n.\n    // n.stream(undefined,undefined,{join: {muted: false, videoStopped: false},})\n        // join(client, cll, )\n\n \n\n    } catch (e: any) { console.log(e.message);\n    y.edit(\"in Join Call error: \" + e.message)\n    }\n}\n\nexport const endvc = async (client: TelegramClient, e: NewMessageEvent) => {\n\n    let y = new Chk(client, e)\ntry{\n    const reslt = await client.invoke(\n        new Api.channels.GetFullChannel({\n          channel: await y.chat(),\n        })\n      );\n      console.log(reslt.fullChat.call); \n      let cll: any = reslt.fullChat.call\n\n    //   console.log(call); \n\n    //   const res = await client.invoke(\n    //     new Api.phone.JoinGroupCall({\n    //       call: new Api.InputGroupCall({\n    //         id: cll.id as any,\n    //         accessHash: cll.accessHash as any,\n    //       }),\n    //     //   joinAs: \"username\",\n    //     //   params: new Api.DataJSON({\n    //     //     data: \"some string here\",\n    //     //   }),\n    //       muted: true,\n    //       videoStopped: true,\n    //     //   inviteHash: \"some string here\",\n    //     })\n    //   );\n    //   console.log(res); \n\n    const result = await client.invoke(\n        new Api.phone.DiscardGroupCall({\n          call: new Api.InputGroupCall({\n            id: cll.id,\n            accessHash: cll.accessHash,\n          }),\n        })\n      );\n      console.log(result);\n\n    } catch (e: any) { console.log(e.message); \n    y.edit(\"in Join Call error: \" + e.message)\n    }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,sBAA4C;AAE5C,iBAAgB;AAIT,IAAI;AACX,IAAI;AACJ,MAAM,KAAK,OAAOA,SAAwB,MAAuB;AAE7D,MAAIC,KAAI,IAAI,WAAAC,QAAIF,SAAQ,CAAC;AACzB,MAAG;AACH,UAAM,SAAS,MAAMA,QAAO;AAAA,MACxB,IAAI,oBAAI,MAAM,gBAAgB;AAAA,QAC5B,MAAM;AAAA,QACN,UAAU,EAAE,QAAQ;AAAA,QAEpB,OAAO;AAAA,QACP,cAAc;AAAA,MAChB,CAAC;AAAA,IACH;AACA,WAAQ,OAAe,QAAQ,GAAG;AAAA,EAKxC,SAAO,KAAN;AACG,YAAQ,IAAI,MAAMC,GAAE,KAAK,CAAC;AAC1B,YAAQ,IAAI,IAAI,OAAO;AAAA,EAC3B;AACA;AAEA,IAAO,aAAQ;AAGR,MAAM,SAAS,OAAOD,SAAwB,MAAuB;AACxE,QAAM,OAAe,KAAK,MAAM,KAAK,OAAO,IAAI,UAAU;AAC1D,MAAIC,KAAI,IAAI,WAAAC,QAAIF,SAAQ,CAAC;AAC7B,MAAG;AACC,UAAM,QAAQ,MAAMA,QAAO;AAAA,MACvB,IAAI,oBAAI,SAAS,eAAe;AAAA,QAC9B,SAAS,MAAMC,GAAE,KAAK;AAAA,MACxB,CAAC;AAAA,IACH;AACA,YAAQ,IAAI,MAAM,SAAS,IAAI;AAC/B,QAAI,MAAW,MAAM,SAAS;AAK9B,UAAM,KAAK,MAAMD,QAAO,OAAO,IAAI,oBAAI,MAAM,cAAc,CAAC;AAC5D,YAAQ,IAAI,EAAE;AAEhB,UAAM,SAAS,MAAMA,QAAO;AAAA,MACxB,IAAI,oBAAI,MAAM,cAAc;AAAA,QAC1B,MAAM,IAAI,oBAAI,eAAe;AAAA,UAC3B,IAAI,IAAI;AAAA,UACR,YAAY,IAAI;AAAA,QAClB,CAAC;AAAA,QACD,QAAQ;AAAA,QACR,QAAQ,IAAI,oBAAI,SAAS;AAAA,UACvB,MAAM,GAAG;AAAA,QACX,CAAC;AAAA,QACD,OAAO;AAAA,QACP,cAAc;AAAA,MAGhB,CAAC;AAAA,IACH;AACA,YAAQ,IAAI,MAAM;AAAA,EAWpB,SAASG,IAAP;AAAiB,YAAQ,IAAIA,GAAE,OAAO;AACxC,IAAAF,GAAE,KAAK,yBAAyBE,GAAE,OAAO;AAAA,EACzC;AACJ;AAEO,MAAM,QAAQ,OAAOH,SAAwB,MAAuB;AAEvE,MAAIC,KAAI,IAAI,WAAAC,QAAIF,SAAQ,CAAC;AAC7B,MAAG;AACC,UAAM,QAAQ,MAAMA,QAAO;AAAA,MACvB,IAAI,oBAAI,SAAS,eAAe;AAAA,QAC9B,SAAS,MAAMC,GAAE,KAAK;AAAA,MACxB,CAAC;AAAA,IACH;AACA,YAAQ,IAAI,MAAM,SAAS,IAAI;AAC/B,QAAI,MAAW,MAAM,SAAS;AAqBhC,UAAM,SAAS,MAAMD,QAAO;AAAA,MACxB,IAAI,oBAAI,MAAM,iBAAiB;AAAA,QAC7B,MAAM,IAAI,oBAAI,eAAe;AAAA,UAC3B,IAAI,IAAI;AAAA,UACR,YAAY,IAAI;AAAA,QAClB,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AACA,YAAQ,IAAI,MAAM;AAAA,EAEpB,SAASG,IAAP;AAAiB,YAAQ,IAAIA,GAAE,OAAO;AACxC,IAAAF,GAAE,KAAK,yBAAyBE,GAAE,OAAO;AAAA,EACzC;AACJ;",
  "names": ["client", "y", "Chk", "e"]
}
