{
  "version": 3,
  "sources": ["../../actions/clone.ts"],
  "sourcesContent": ["import bigInt, { BigInteger } from \"big-integer\";\nimport { Api, TelegramClient } from \"telegram\";\nimport { CustomFile } from \"telegram/client/uploads\";\nimport { NewMessageEvent } from \"telegram/events\"\nimport * as fs from 'fs';\nimport { sleep } from \"../strt\";\nimport Chk from \"../helpers/chk\";\n\nconst clone = async (client: TelegramClient, e: NewMessageEvent, upt: any) => {\n    let y = new Chk(client, e);\n    try {\n        const m = e.message\n        const chatId = m.chatId as import(\"big-integer\").BigInteger\n        if (m.message.includes(\"s\") || m.message.includes(\"save\")) {\n            const msgg: any = m\n            const uidd: any = m.fromId\n            const id: any = uidd.userId\n            const msg: any = await client.getEntity(uidd.userId)\n            const name = msg.firstName + (msg.lastName != null ? ' ' + msg.lastName : '')\n            const username = msg.username\n            const me = {\n                name, username, fromId: { userId: id }, id, firstName: msg.firstName, lastName: msg.lastName\n            }\n\n            try {\n                let rid = await y.edit(\"Saving user data.....\")\n                const buf: any = await client.downloadProfilePhoto(id)\n\n                const dataString = JSON.stringify(me, null, 2);\n                fs.writeFileSync('data.txt', dataString);\n                if (buf.length > 11) {\n                    fs.writeFileSync(\"./m.png\", buf);\n                } else {\n                    fs.unlinkSync('./m.png')\n                }\n                return y.edit('Your current state has been stored and previous save deleted', {id: rid.id})\n\n            } catch (error) {\n                console.error(error);\n            }\n            return\n        }\n\n        if (m.message.includes('r') || m.message.includes(\"retrieve\")) {\n            try {\n                const fileData = fs.readFileSync('./data.txt', 'utf-8');\n                const me = JSON.parse(fileData);\n\n                let rid = await y.edit(\"Retriving previous state of name: \" + me.firstName, {d: false});\n\n                await sleep(100)\n                await y.edit(\"Updating info.....\", { id: rid.id, d: false});\n                const relt = await client.invoke(\n                    new Api.account.UpdateProfile({\n                        firstName: me.firstName,\n                        lastName: me.lastName ? me.lastName : '',\n                        about: (me.firstName + (me.lastName ? \" \" + me.lastName : '')),\n                    })\n                );\n\n                if (me.username != null) {\n                    try { await client.invoke(new Api.account.UpdateUsername({ username: me.username + '0' })) } catch (error: any) {\n                        try { await client.invoke(new Api.account.UpdateUsername({ username: me.username + '1' })) } catch (r: any) {\n                            try { await client.invoke(new Api.account.UpdateUsername({ username: me.username + '456' })) } catch (err) {\n                                try { await client.invoke(new Api.account.UpdateUsername({ username: '' })) } catch (eor: any) {\n                                    console.log(eor)\n                                    // y.edit(eor.message)\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    try { await client.invoke(new Api.account.UpdateUsername({ username: '' }))} catch (eor) {\n                        console.log(eor)\n                    }\n                }\n                await sleep(500)\n                await y.edit(\"Removing old pic.....\", { id: rid.id, d: false} );\n                const result = await client.invoke(\n                    new Api.photos.UpdateProfilePhoto({\n                        id:\n                            new Api.InputPhoto({\n                                id: bigInt(),\n                                accessHash: bigInt(),\n                                fileReference: Buffer.from(\"arbitrary data here\"),\n                            }),\n                    })\n                );\n                try {\n                    await sleep(200)\n                    await y.edit(\"Uploading new pic.....\" , { id: rid.id, d: false});\n                    const toUpload = new CustomFile(\"m.png\", fs.statSync(\"./m.png\").size, \"./m.png\");\n\n                    const res = await client.invoke(\n                        new Api.photos.UploadProfilePhoto({\n                            file: await client.uploadFile({\n                                file: toUpload,\n                                workers: 1,\n                            })\n                        })\n                    );\n                    await sleep(200)\n                    y.edit( \"Retrieve profile successfull: User \" + me.firstName + \"\\nLogic.B Userbot\", { id: rid.id});\n                } catch (err) { }\n\n            } catch (error) {\n                console.error(\"r: \" + error);\n            }\n            return\n        }\n\n        if(m.replyTo == null){\n            let msr : any = m.fromId\n            return y.edit(\"Please reply to user\")\n        }\n        const replied: any = await m.getReplyMessage()\n        const me: any = await client.getEntity(replied.fromId.userId)\n\n       let t = await y.edit(\"Clonning user: \" + ((me.username != null) ? \"@\" + me.username : me.firstName) , { d: false});\n\n        const reult = await client.invoke(\n            new Api.messages.SetTyping({\n                peer: chatId,\n                action: new Api.SendMessageTypingAction(),\n                topMsgId: 43,\n            })\n        );\n\n        await y.edit(\"Checking user pic.....\"  , { d: false, id: t.id});\n        const buf: any = await client.downloadProfilePhoto(replied.fromId.userId)\n\n        await sleep(1000)\n        await y.edit(\"Updating info.....\" , { d: false, id: t.id});\n        const relt = await client.invoke(\n            new Api.account.UpdateProfile({\n                firstName: me.firstName,\n                lastName: me.lastName ? me.lastName : '',\n                about: (me.firstName + (me.lastName ? \" \" + me.lastName : '')),\n            })\n        );\n\n        console.log(typeof me.username)\n        if (me.username != null) {\n            let usrr: string = me.username + '0'\n            console.log(typeof (me.username + '1'))\n            console.log(typeof (me.username + '456'))\n\n            try { await client.invoke(new Api.account.UpdateUsername({ username: (me.username + '0') })) } catch (error: any) {\n                try { await client.invoke(new Api.account.UpdateUsername({ username: (me.username + '1') })) } catch (r: any) {\n                    try { await client.invoke(new Api.account.UpdateUsername({ username: (me.username + '456') })) } catch (err) {\n                        try { await client.invoke(new Api.account.UpdateUsername({ username: '' })) } catch (eor: any) {\n                            console.log(eor)\n                            // y.edit(eor.message)\n\n                        }\n                    }\n                }\n            }\n        } else {\n        try {await client.invoke(new Api.account.UpdateUsername({ username: '' })) } catch (eor) {\n                console.log(eor)\n            }\n        }\n\n        await sleep(500)\n        await y.edit(\"Removing old pic.....\" , { d: false, id: t.id});\n        const result = await client.invoke(\n            new Api.photos.UpdateProfilePhoto({ id: new Api.InputPhoto({ id: bigInt(), accessHash: bigInt(), fileReference: Buffer.from(\"arbitrary data here\"), }), })\n        );\n\n        if (buf.length > 11) {\n            await sleep(200)\n            await y.edit(\"Uploading new pic.....\", { d: false, id: t.id});\n            fs.writeFileSync(\"./r.png\", buf);\n            const toUpload = new CustomFile(\"r.png\", fs.statSync(\"./r.png\").size, \"./r.png\");\n\n            const res = await client.invoke(\n                new Api.photos.UploadProfilePhoto({\n                    file: await client.uploadFile({\n                        file: toUpload,\n                        workers: 1,\n                    })\n                })\n            );\n        }\n        await sleep(200)\n        await y.edit(\"Clonning successfull: User \" + me.firstName + \"\\nLogic.B Userbot\" , { id: t.id});\n        await client.deleteMessages(chatId, [454], {revoke: false})\n    } catch (error: any) {\n        console.log(\"clone: \" + error.message)\n    }\n}\n\nexport default clone"],
  "mappings": "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",
  "names": ["Chk", "me", "buf", "relt", "result", "bigInt"]
}
